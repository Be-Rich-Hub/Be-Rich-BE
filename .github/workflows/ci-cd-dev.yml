name: "[development] CI/CD"


on:
  push:
    branches:
      - develop

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup application-dev.yml
        run: |
          cd src/main/resources
          echo "${{ secrets.APPLICATION_DEV }}" > application-dev.yml
        shell: bash

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      - name: Check current directory and build/libs content before copying jar
        run: |
          pwd
          ls -l build/libs

      - name: Copy JAR to app.jar
        run: cp build/libs/*.jar build/libs/app.jar

      - name: Set image tag
        id: set-tag
        run: echo "image_tag=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Image Build
        run: docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/berich:${{ steps.set-tag.outputs.image_tag }} .

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/berich:${{ steps.set-tag.outputs.image_tag }}

  deploy-to-ec2:
    needs: build-docker-image
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            LOG_STREAM_ID=$(date +"%Y%m%d-%H%M%S")

            mkdir -p ~/deploy
            cd ~/deploy

            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "IMAGE_TAG=${IMAGE_TAG}" >> .env
            echo "LOG_STREAM_ID=${LOG_STREAM_ID}" >> .env
            echo "PROFILE=dev" >> .env

            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            if [ -f "docker-compose.yml" ]; then
              sudo docker-compose down
            fi

            curl -L -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/develop/docker-compose.dev.yml

            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/berich:${{ needs.build-docker-image.outputs.image_tag }}

            sudo docker image prune -f

            sudo -E docker-compose up -d --force-recreate --remove-orphans
